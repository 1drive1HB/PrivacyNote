name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Create XOR encrypted config
        run: |
          node << 'EOF'
          // Simple XOR encryption
          function xorEncrypt(text, key) {
            let result = '';
            for (let i = 0; i < text.length; i++) {
              result += String.fromCharCode(text.charCodeAt(i) ^ key.charCodeAt(i % key.length));
            }
            return btoa(result); // Base64 encode the result
          }
          
          // Generate a unique key for this build
          const key = "pn_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
          
          const secrets = {
            supabaseUrl: "${{ secrets.SUPABASE_URL }}",
            supabaseKey: "${{ secrets.SUPABASE_KEY }}",
            tableName: "${{ secrets.SUPABASE_TABLE_M || 'notes' }}",
            cfTr: "${{ secrets.CF_TR }}", 
            encryptionKey: "${{ secrets.ENCRYPTION_KEY }}"
          };
          
          const encrypted = {};
          for (const [secretKey, value] of Object.entries(secrets)) {
            encrypted[secretKey] = value ? xorEncrypt(value, key) : '';
          }
          
          const configContent = `// XOR ENCRYPTED CONFIG
          const XOR_KEY = "${key}";
          
          const xorDecrypt = (encoded, key) => {
            try {
              const text = atob(encoded);
              let result = '';
              for (let i = 0; i < text.length; i++) {
                result += String.fromCharCode(text.charCodeAt(i) ^ key.charCodeAt(i % key.length));
              }
              return result;
            } catch {
              return '';
            }
          };
          
          const ENCRYPTED_VALUES = ${JSON.stringify(encrypted, null, 2)};
          
          const config = {
            supabaseUrl: xorDecrypt(ENCRYPTED_VALUES.supabaseUrl, XOR_KEY),
            supabaseKey: xorDecrypt(ENCRYPTED_VALUES.supabaseKey, XOR_KEY),
            tableName: xorDecrypt(ENCRYPTED_VALUES.tableName, XOR_KEY),
            cfTr: xorDecrypt(ENCRYPTED_VALUES.cfTr, XOR_KEY),
            encryptionKey: xorDecrypt(ENCRYPTED_VALUES.encryptionKey, XOR_KEY),
            isProduction: true
          };
          
          export const initializeConfig = async () => {
            console.log('ðŸ”§ Production config loaded (XOR encrypted)');
            return config;
          };
          
          export { config };`;
          
          require('fs').writeFileSync('src/js/config.js', configContent);
          console.log('âœ… XOR encrypted config file created - ALL values encrypted including table name');
          EOF
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4